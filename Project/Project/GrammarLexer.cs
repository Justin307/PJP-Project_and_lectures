//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/ondra/OneDrive/Dokumenty/PJP/Project/Project/Grammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, INT_KEYWORD=5, FLOAT_KEYWORD=6, STRING_KEYWORD=7, 
		BOOL_KEYWORD=8, READ=9, WRITE=10, IF=11, ELSE=12, WHILE=13, SEMI=14, COMMA=15, 
		DOT=16, MULT=17, DIV=18, MOD=19, PLUS=20, MINUS=21, LESS=22, GREATER=23, 
		NEG=24, ASSIGN=25, EQ=26, NEQ=27, AND=28, OR=29, IDENTIFIER=30, INT=31, 
		FLOAT=32, BOOL=33, STRING_LITERAL=34, WS=35, COMMENT=36, LINE_COMMENT=37;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "INT_KEYWORD", "FLOAT_KEYWORD", "STRING_KEYWORD", 
		"BOOL_KEYWORD", "READ", "WRITE", "IF", "ELSE", "WHILE", "SEMI", "COMMA", 
		"DOT", "MULT", "DIV", "MOD", "PLUS", "MINUS", "LESS", "GREATER", "NEG", 
		"ASSIGN", "EQ", "NEQ", "AND", "OR", "IDENTIFIER", "INT", "FLOAT", "BOOL", 
		"STRING_LITERAL", "WS", "COMMENT", "LINE_COMMENT"
	};


	public GrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "'int'", "'float'", "'string'", "'bool'", 
		"'read'", "'write'", "'if'", "'else'", "'while'", "';'", "','", "'.'", 
		"'*'", "'/'", "'%'", "'+'", "'-'", "'<'", "'>'", "'!'", "'='", "'=='", 
		"'!='", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "INT_KEYWORD", "FLOAT_KEYWORD", "STRING_KEYWORD", 
		"BOOL_KEYWORD", "READ", "WRITE", "IF", "ELSE", "WHILE", "SEMI", "COMMA", 
		"DOT", "MULT", "DIV", "MOD", "PLUS", "MINUS", "LESS", "GREATER", "NEG", 
		"ASSIGN", "EQ", "NEQ", "AND", "OR", "IDENTIFIER", "INT", "FLOAT", "BOOL", 
		"STRING_LITERAL", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,37,241,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,
		1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,
		8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,
		11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,
		16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
		23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,
		28,1,28,1,29,1,29,5,29,169,8,29,10,29,12,29,172,9,29,1,30,4,30,175,8,30,
		11,30,12,30,176,1,31,4,31,180,8,31,11,31,12,31,181,1,31,1,31,4,31,186,
		8,31,11,31,12,31,187,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,
		199,8,32,1,33,1,33,5,33,203,8,33,10,33,12,33,206,9,33,1,33,1,33,1,34,4,
		34,211,8,34,11,34,12,34,212,1,34,1,34,1,35,1,35,1,35,1,35,5,35,221,8,35,
		10,35,12,35,224,9,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,5,36,
		235,8,36,10,36,12,36,238,9,36,1,36,1,36,2,204,222,0,37,1,1,3,2,5,3,7,4,
		9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
		35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
		59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,1,0,5,2,0,65,90,97,122,
		4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,
		13,13,249,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
		0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
		0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
		1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,
		0,3,77,1,0,0,0,5,79,1,0,0,0,7,81,1,0,0,0,9,83,1,0,0,0,11,87,1,0,0,0,13,
		93,1,0,0,0,15,100,1,0,0,0,17,105,1,0,0,0,19,110,1,0,0,0,21,116,1,0,0,0,
		23,119,1,0,0,0,25,124,1,0,0,0,27,130,1,0,0,0,29,132,1,0,0,0,31,134,1,0,
		0,0,33,136,1,0,0,0,35,138,1,0,0,0,37,140,1,0,0,0,39,142,1,0,0,0,41,144,
		1,0,0,0,43,146,1,0,0,0,45,148,1,0,0,0,47,150,1,0,0,0,49,152,1,0,0,0,51,
		154,1,0,0,0,53,157,1,0,0,0,55,160,1,0,0,0,57,163,1,0,0,0,59,166,1,0,0,
		0,61,174,1,0,0,0,63,179,1,0,0,0,65,198,1,0,0,0,67,200,1,0,0,0,69,210,1,
		0,0,0,71,216,1,0,0,0,73,230,1,0,0,0,75,76,5,40,0,0,76,2,1,0,0,0,77,78,
		5,41,0,0,78,4,1,0,0,0,79,80,5,123,0,0,80,6,1,0,0,0,81,82,5,125,0,0,82,
		8,1,0,0,0,83,84,5,105,0,0,84,85,5,110,0,0,85,86,5,116,0,0,86,10,1,0,0,
		0,87,88,5,102,0,0,88,89,5,108,0,0,89,90,5,111,0,0,90,91,5,97,0,0,91,92,
		5,116,0,0,92,12,1,0,0,0,93,94,5,115,0,0,94,95,5,116,0,0,95,96,5,114,0,
		0,96,97,5,105,0,0,97,98,5,110,0,0,98,99,5,103,0,0,99,14,1,0,0,0,100,101,
		5,98,0,0,101,102,5,111,0,0,102,103,5,111,0,0,103,104,5,108,0,0,104,16,
		1,0,0,0,105,106,5,114,0,0,106,107,5,101,0,0,107,108,5,97,0,0,108,109,5,
		100,0,0,109,18,1,0,0,0,110,111,5,119,0,0,111,112,5,114,0,0,112,113,5,105,
		0,0,113,114,5,116,0,0,114,115,5,101,0,0,115,20,1,0,0,0,116,117,5,105,0,
		0,117,118,5,102,0,0,118,22,1,0,0,0,119,120,5,101,0,0,120,121,5,108,0,0,
		121,122,5,115,0,0,122,123,5,101,0,0,123,24,1,0,0,0,124,125,5,119,0,0,125,
		126,5,104,0,0,126,127,5,105,0,0,127,128,5,108,0,0,128,129,5,101,0,0,129,
		26,1,0,0,0,130,131,5,59,0,0,131,28,1,0,0,0,132,133,5,44,0,0,133,30,1,0,
		0,0,134,135,5,46,0,0,135,32,1,0,0,0,136,137,5,42,0,0,137,34,1,0,0,0,138,
		139,5,47,0,0,139,36,1,0,0,0,140,141,5,37,0,0,141,38,1,0,0,0,142,143,5,
		43,0,0,143,40,1,0,0,0,144,145,5,45,0,0,145,42,1,0,0,0,146,147,5,60,0,0,
		147,44,1,0,0,0,148,149,5,62,0,0,149,46,1,0,0,0,150,151,5,33,0,0,151,48,
		1,0,0,0,152,153,5,61,0,0,153,50,1,0,0,0,154,155,5,61,0,0,155,156,5,61,
		0,0,156,52,1,0,0,0,157,158,5,33,0,0,158,159,5,61,0,0,159,54,1,0,0,0,160,
		161,5,38,0,0,161,162,5,38,0,0,162,56,1,0,0,0,163,164,5,124,0,0,164,165,
		5,124,0,0,165,58,1,0,0,0,166,170,7,0,0,0,167,169,7,1,0,0,168,167,1,0,0,
		0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,60,1,0,0,0,172,170,
		1,0,0,0,173,175,7,2,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,1,0,0,
		0,176,177,1,0,0,0,177,62,1,0,0,0,178,180,7,2,0,0,179,178,1,0,0,0,180,181,
		1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,183,1,0,0,0,183,185,5,46,0,
		0,184,186,7,2,0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,
		188,1,0,0,0,188,64,1,0,0,0,189,190,5,116,0,0,190,191,5,114,0,0,191,192,
		5,117,0,0,192,199,5,101,0,0,193,194,5,102,0,0,194,195,5,97,0,0,195,196,
		5,108,0,0,196,197,5,115,0,0,197,199,5,101,0,0,198,189,1,0,0,0,198,193,
		1,0,0,0,199,66,1,0,0,0,200,204,5,34,0,0,201,203,9,0,0,0,202,201,1,0,0,
		0,203,206,1,0,0,0,204,205,1,0,0,0,204,202,1,0,0,0,205,207,1,0,0,0,206,
		204,1,0,0,0,207,208,5,34,0,0,208,68,1,0,0,0,209,211,7,3,0,0,210,209,1,
		0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,
		214,215,6,34,0,0,215,70,1,0,0,0,216,217,5,47,0,0,217,218,5,42,0,0,218,
		222,1,0,0,0,219,221,9,0,0,0,220,219,1,0,0,0,221,224,1,0,0,0,222,223,1,
		0,0,0,222,220,1,0,0,0,223,225,1,0,0,0,224,222,1,0,0,0,225,226,5,42,0,0,
		226,227,5,47,0,0,227,228,1,0,0,0,228,229,6,35,0,0,229,72,1,0,0,0,230,231,
		5,47,0,0,231,232,5,47,0,0,232,236,1,0,0,0,233,235,8,4,0,0,234,233,1,0,
		0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,239,1,0,0,0,238,
		236,1,0,0,0,239,240,6,36,0,0,240,74,1,0,0,0,10,0,170,176,181,187,198,204,
		212,222,236,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

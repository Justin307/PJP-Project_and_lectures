//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/ondra/OneDrive/Dokumenty/PJP/Project/Project/Grammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, INT_KEYWORD=5, FLOAT_KEYWORD=6, STRING_KEYWORD=7, 
		BOOL_KEYWORD=8, READ=9, WRITE=10, IF=11, ELSE=12, WHILE=13, DO=14, SEMI=15, 
		COMMA=16, DOT=17, MULT=18, DIV=19, MOD=20, PLUS=21, MINUS=22, LESS=23, 
		GREATER=24, NEG=25, ASSIGN=26, EQ=27, NEQ=28, AND=29, OR=30, INT=31, FLOAT=32, 
		BOOL=33, STRING_LITERAL=34, IDENTIFIER=35, WS=36, COMMENT=37, LINE_COMMENT=38;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "INT_KEYWORD", "FLOAT_KEYWORD", "STRING_KEYWORD", 
		"BOOL_KEYWORD", "READ", "WRITE", "IF", "ELSE", "WHILE", "DO", "SEMI", 
		"COMMA", "DOT", "MULT", "DIV", "MOD", "PLUS", "MINUS", "LESS", "GREATER", 
		"NEG", "ASSIGN", "EQ", "NEQ", "AND", "OR", "INT", "FLOAT", "BOOL", "STRING_LITERAL", 
		"IDENTIFIER", "WS", "COMMENT", "LINE_COMMENT"
	};


	public GrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "'int'", "'float'", "'string'", "'bool'", 
		"'read'", "'write'", "'if'", "'else'", "'while'", "'do'", "';'", "','", 
		"'.'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", "'>'", "'!'", "'='", 
		"'=='", "'!='", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "INT_KEYWORD", "FLOAT_KEYWORD", "STRING_KEYWORD", 
		"BOOL_KEYWORD", "READ", "WRITE", "IF", "ELSE", "WHILE", "DO", "SEMI", 
		"COMMA", "DOT", "MULT", "DIV", "MOD", "PLUS", "MINUS", "LESS", "GREATER", 
		"NEG", "ASSIGN", "EQ", "NEQ", "AND", "OR", "INT", "FLOAT", "BOOL", "STRING_LITERAL", 
		"IDENTIFIER", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,38,246,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,
		4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
		1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,
		11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,
		14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
		21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,
		27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,4,30,173,8,30,11,30,12,30,174,1,
		31,4,31,178,8,31,11,31,12,31,179,1,31,1,31,4,31,184,8,31,11,31,12,31,185,
		1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,197,8,32,1,33,1,33,5,
		33,201,8,33,10,33,12,33,204,9,33,1,33,1,33,1,34,1,34,5,34,210,8,34,10,
		34,12,34,213,9,34,1,35,4,35,216,8,35,11,35,12,35,217,1,35,1,35,1,36,1,
		36,1,36,1,36,5,36,226,8,36,10,36,12,36,229,9,36,1,36,1,36,1,36,1,36,1,
		36,1,37,1,37,1,37,1,37,5,37,240,8,37,10,37,12,37,243,9,37,1,37,1,37,2,
		202,227,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
		25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
		49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
		73,37,75,38,1,0,5,1,0,48,57,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,
		122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,254,0,1,1,0,0,0,0,3,1,0,0,0,0,
		5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
		0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,79,1,0,0,0,5,81,1,0,0,
		0,7,83,1,0,0,0,9,85,1,0,0,0,11,89,1,0,0,0,13,95,1,0,0,0,15,102,1,0,0,0,
		17,107,1,0,0,0,19,112,1,0,0,0,21,118,1,0,0,0,23,121,1,0,0,0,25,126,1,0,
		0,0,27,132,1,0,0,0,29,135,1,0,0,0,31,137,1,0,0,0,33,139,1,0,0,0,35,141,
		1,0,0,0,37,143,1,0,0,0,39,145,1,0,0,0,41,147,1,0,0,0,43,149,1,0,0,0,45,
		151,1,0,0,0,47,153,1,0,0,0,49,155,1,0,0,0,51,157,1,0,0,0,53,159,1,0,0,
		0,55,162,1,0,0,0,57,165,1,0,0,0,59,168,1,0,0,0,61,172,1,0,0,0,63,177,1,
		0,0,0,65,196,1,0,0,0,67,198,1,0,0,0,69,207,1,0,0,0,71,215,1,0,0,0,73,221,
		1,0,0,0,75,235,1,0,0,0,77,78,5,40,0,0,78,2,1,0,0,0,79,80,5,41,0,0,80,4,
		1,0,0,0,81,82,5,123,0,0,82,6,1,0,0,0,83,84,5,125,0,0,84,8,1,0,0,0,85,86,
		5,105,0,0,86,87,5,110,0,0,87,88,5,116,0,0,88,10,1,0,0,0,89,90,5,102,0,
		0,90,91,5,108,0,0,91,92,5,111,0,0,92,93,5,97,0,0,93,94,5,116,0,0,94,12,
		1,0,0,0,95,96,5,115,0,0,96,97,5,116,0,0,97,98,5,114,0,0,98,99,5,105,0,
		0,99,100,5,110,0,0,100,101,5,103,0,0,101,14,1,0,0,0,102,103,5,98,0,0,103,
		104,5,111,0,0,104,105,5,111,0,0,105,106,5,108,0,0,106,16,1,0,0,0,107,108,
		5,114,0,0,108,109,5,101,0,0,109,110,5,97,0,0,110,111,5,100,0,0,111,18,
		1,0,0,0,112,113,5,119,0,0,113,114,5,114,0,0,114,115,5,105,0,0,115,116,
		5,116,0,0,116,117,5,101,0,0,117,20,1,0,0,0,118,119,5,105,0,0,119,120,5,
		102,0,0,120,22,1,0,0,0,121,122,5,101,0,0,122,123,5,108,0,0,123,124,5,115,
		0,0,124,125,5,101,0,0,125,24,1,0,0,0,126,127,5,119,0,0,127,128,5,104,0,
		0,128,129,5,105,0,0,129,130,5,108,0,0,130,131,5,101,0,0,131,26,1,0,0,0,
		132,133,5,100,0,0,133,134,5,111,0,0,134,28,1,0,0,0,135,136,5,59,0,0,136,
		30,1,0,0,0,137,138,5,44,0,0,138,32,1,0,0,0,139,140,5,46,0,0,140,34,1,0,
		0,0,141,142,5,42,0,0,142,36,1,0,0,0,143,144,5,47,0,0,144,38,1,0,0,0,145,
		146,5,37,0,0,146,40,1,0,0,0,147,148,5,43,0,0,148,42,1,0,0,0,149,150,5,
		45,0,0,150,44,1,0,0,0,151,152,5,60,0,0,152,46,1,0,0,0,153,154,5,62,0,0,
		154,48,1,0,0,0,155,156,5,33,0,0,156,50,1,0,0,0,157,158,5,61,0,0,158,52,
		1,0,0,0,159,160,5,61,0,0,160,161,5,61,0,0,161,54,1,0,0,0,162,163,5,33,
		0,0,163,164,5,61,0,0,164,56,1,0,0,0,165,166,5,38,0,0,166,167,5,38,0,0,
		167,58,1,0,0,0,168,169,5,124,0,0,169,170,5,124,0,0,170,60,1,0,0,0,171,
		173,7,0,0,0,172,171,1,0,0,0,173,174,1,0,0,0,174,172,1,0,0,0,174,175,1,
		0,0,0,175,62,1,0,0,0,176,178,7,0,0,0,177,176,1,0,0,0,178,179,1,0,0,0,179,
		177,1,0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,181,183,5,46,0,0,182,184,7,
		0,0,0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,
		186,64,1,0,0,0,187,188,5,116,0,0,188,189,5,114,0,0,189,190,5,117,0,0,190,
		197,5,101,0,0,191,192,5,102,0,0,192,193,5,97,0,0,193,194,5,108,0,0,194,
		195,5,115,0,0,195,197,5,101,0,0,196,187,1,0,0,0,196,191,1,0,0,0,197,66,
		1,0,0,0,198,202,5,34,0,0,199,201,9,0,0,0,200,199,1,0,0,0,201,204,1,0,0,
		0,202,203,1,0,0,0,202,200,1,0,0,0,203,205,1,0,0,0,204,202,1,0,0,0,205,
		206,5,34,0,0,206,68,1,0,0,0,207,211,7,1,0,0,208,210,7,2,0,0,209,208,1,
		0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,70,1,0,0,0,213,
		211,1,0,0,0,214,216,7,3,0,0,215,214,1,0,0,0,216,217,1,0,0,0,217,215,1,
		0,0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,220,6,35,0,0,220,72,1,0,0,0,
		221,222,5,47,0,0,222,223,5,42,0,0,223,227,1,0,0,0,224,226,9,0,0,0,225,
		224,1,0,0,0,226,229,1,0,0,0,227,228,1,0,0,0,227,225,1,0,0,0,228,230,1,
		0,0,0,229,227,1,0,0,0,230,231,5,42,0,0,231,232,5,47,0,0,232,233,1,0,0,
		0,233,234,6,36,0,0,234,74,1,0,0,0,235,236,5,47,0,0,236,237,5,47,0,0,237,
		241,1,0,0,0,238,240,8,4,0,0,239,238,1,0,0,0,240,243,1,0,0,0,241,239,1,
		0,0,0,241,242,1,0,0,0,242,244,1,0,0,0,243,241,1,0,0,0,244,245,6,37,0,0,
		245,76,1,0,0,0,10,0,174,179,185,196,202,211,217,227,241,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
